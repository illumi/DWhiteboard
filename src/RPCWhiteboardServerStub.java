/*
 * Automatically generated by jrpcgen 1.0.7 on 30/11/11 21:48
 * jrpcgen is part of the "Remote Tea" ONC/RPC package for Java
 * See http://remotetea.sourceforge.net for details
 */
import org.acplt.oncrpc.*;
import java.io.IOException;

import java.net.InetAddress;

import org.acplt.oncrpc.server.*;

/**
 */
public abstract class RPCWhiteboardServerStub extends OncRpcServerStub implements OncRpcDispatchable {

    public RPCWhiteboardServerStub()
           throws OncRpcException, IOException {
        this(0);
    }

    public RPCWhiteboardServerStub(int port)
           throws OncRpcException, IOException {
        this(null, port);
    }

    public RPCWhiteboardServerStub(InetAddress bindAddr, int port)
           throws OncRpcException, IOException {
        info = new OncRpcServerTransportRegistrationInfo [] {
            new OncRpcServerTransportRegistrationInfo(RPCWhiteboard.WHITEBOARD_PROG, 1),
        };
        transports = new OncRpcServerTransport [] {
            new OncRpcUdpServerTransport(this, bindAddr, port, info, 32768),
            new OncRpcTcpServerTransport(this, bindAddr, port, info, 32768)
        };
    }

    public void dispatchOncRpcCall(OncRpcCallInformation call, int program, int version, int procedure)
           throws OncRpcException, IOException {
        if ( version == 1 ) {
            switch ( procedure ) {
            case 1: {
                XdrString args$ = new XdrString();
                call.retrieveCall(args$);
                sendMessage_1(args$.stringValue());
                call.reply(XdrVoid.XDR_VOID);
                break;
            }
            case 2: {
                call.retrieveCall(XdrVoid.XDR_VOID);
                XdrString result$ = new XdrString(readMessage_1());
                call.reply(result$);
                break;
            }
            case 3: {
                call.retrieveCall(XdrVoid.XDR_VOID);
                close_1();
                call.reply(XdrVoid.XDR_VOID);
                break;
            }
            default:
                call.failProcedureUnavailable();
            }
        } else {
            call.failProgramUnavailable();
        }
    }

    public abstract void sendMessage_1(String arg1);

    public abstract String readMessage_1();

    public abstract void close_1();

}
// End of WhiteboardServerStub.java
